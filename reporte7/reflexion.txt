Esta actividad sobre JWT fue clave para entender cómo funciona la seguridad real en las aplicaciones. Lo que me pareció más interesante no fue solo crear los tokens, sino entender por qué se usan dos: el access_token y el refresh_token. Aprendí que esto es un balance entre seguridad y comodidad; el access_token dura muy poco (5 minutos en mi código) por si alguien lo roba, pero el refresh_token dura mucho más (7 días) para que el usuario no tenga que iniciar sesión a cada rato. Ver cómo la lógica en script.js maneja automáticamente un token expirado y pide uno nuevo usando el refresh token fue la parte más reveladora. Además, esta práctica me obligó a integrar dos microservicios separados: mi servicio de Auth (app_jwt.py), que solo se encarga de usuarios y tokens, y mi servicio de Libros (micro.py), que solo maneja el catálogo. El cliente (script.js) los conecta, pidiendo primero el "pase" al servicio de Auth y luego presentando ese pase al servicio de Libros. Me di cuenta de que este sistema es mucho más fácil de mantener; como sus funciones son independientes, puedo cambiar toda la lógica de contraseñas en app_jwt.py sin tocar ni arriesgar el servicio de Libros, lo que hace que todo sea menos frágil y más fácil de actualizar.
